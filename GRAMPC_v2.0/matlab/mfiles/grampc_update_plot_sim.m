function grampc_update_plot_sim(vec,ph,idx,decimation)
% This function updates the simulation plot of GRAMPC. The figure
% specified via the plot handle ph must have been generated by
% the function grampc_init_plot_sim. 
%
% Input arguments are:
% 1) vec - solution struct
% 2) ph - plot handle generated by grampc_init_plot_sol
% 3) idx - index struct that specifies the quantities to be plotted (optional)
% 4) decimation - factor for downsampling the plot (optional)
%
% 
% This file is part of GRAMPC - (https://sourceforge.net/projects/grampc/)
%
% GRAMPC -- A software framework for embedded nonlinear model predictive
% control using a gradient-based augmented Lagrangian approach
%
% Copyright (C) 2014-2018 by Tobias Englert, Knut Graichen, Felix Mesmer, 
% Soenke Rhein, Andreas Voelz, Bartosz Kaepernick (<v2.0), Tilman Utz (<v2.0). 
% Developed at the Institute of Measurement, Control, and Microtechnology, 
% Ulm University. All rights reserved.
%
% GRAMPC is free software: you can redistribute it and/or modify
% it under the terms of the GNU Lesser General Public License as 
% published by the Free Software Foundation, either version 3 of 
% the License, or (at your option) any later version.
%
% GRAMPC is distributed in the hope that it will be useful,
% but WITHOUT ANY WARRANTY; without even the implied warranty of
% MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the
% GNU Lesser General Public License for more details.
%
% You should have received a copy of the GNU Lesser General Public 
% License along with GRAMPC. If not, see <http://www.gnu.org/licenses/>.
%

if nargin < 3 || isempty(idx)
    %idx.States = 1:size(vec.x,1);
    idx.States = 1:6;
    idx.Controls = 1:size(vec.u,1);
    if isfield(vec,'constr')
        idx.Constraints = 1:size(vec.constr,1);
    else
        idx.Constraints = [];
    end
end
if nargin < 4 || isempty(decimation)
    decimation = 1;
end

% Update handles
% plot states and adj. states
for i = idx.States
    set(ph.s1(i),'YData',vec.x(i,1:decimation:end))
    set(ph.s2(i),'YData',vec.adj(i,1:decimation:end))
end

% plot controls
for i = idx.Controls
    set(ph.s3(i),'YData',vec.u(i,1:decimation:end))
end

for i = idx.Constraints
    % Constraints
    set(ph.s4(i),'YData',vec.constr(i,1:decimation:end))
    % mult
    set(ph.s5(i),'YData',vec.mult(i,1:decimation:end))
    % pen
    set(ph.s6(i),'YData',vec.pen(i,1:decimation:end))
end
end

